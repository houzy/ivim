" NeoBundle settings {{{

" TODO
"NeoBundle 'hewes/unite-gtags'
"NeoBundle 'shibuyanorailgun/gtags.vim'

NeoBundle 'guns/xterm-color-table.vim'
NeoBundle 'houzy/jeffy-plugins'
NeoBundle 'tpope/vim-ragtag'
NeoBundle 'zhaocai/GoldenView.Vim' "Always have a nice view for vim split windows
NeoBundle 'vim-scripts/restore_view.vim'
NeoBundle 'vim-scripts/VisIncr'
" an excellent calendar app, has the same command with calendar-vim
"NeoBundle 'itchyny/calendar.vim'

" orgmode
NeoBundle 'hsitz/VimOrganizer'
NeoBundle 'mattn/calendar-vim'
NeoBundle 'chrisbra/NrrwRgn'
NeoBundle 'vim-scripts/utl.vim'

" }}}

" local settings {{{

set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,ucs-bom,chinese,taiwan,japan,korea,latin1
set fileformat=unix

set mouse=a                 " Automatically enable mouse usage
set mousehide               " Hide the mouse cursor while typing
set virtualedit&            " Reset option to its default value.
set whichwrap-=h
set whichwrap-=l

set copyindent
set smarttab
set tabstop=4               " An indentation every four columns
"set cinoptions=:0,l1,g0,t0,(0,(s    " C kind language indent options

" using full path: append one / to path
exec 'set backupdir='.&backupdir.'/'
exec 'set viewdir='.&viewdir.'/'
exec 'set directory='.&directory.'/'
exec 'set undodir='.&undodir.'/'

" add systags
set tags+=~/ctagsFile/systags

" }}}

" listchars setting {{{

let change_listchars_setting = 1

if change_listchars_setting
    set showbreak&
    " set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮ " Change listchars
    set listchars=tab:›\ ,eol:¬,extends:❯,precedes:❮,nbsp:⌴,trail:⌴ " Change listchars
    set listchars-=eol:¬
    " autocmd remove
    autocmd! trailing InsertEnter,InsertLeave *

    " When non-zero, a column with the specified width is shown at the side
    " of the window which indicates open and closed folds.
    set foldcolumn=0 " Set fold column to 1 in vimrc
endif

" }}}

" color settings {{{

let using_light_colorscheme = 0
let using_dark_colorscheme = 0

if using_light_colorscheme
    " gruvbox color scheme
    NeoBundle 'morhetz/gruvbox'
    " gruvbox
    set background=light   " Setting light mode
    let g:gruvbox_hls_cursor='orange'
    " add this line to vimrc.ivim.local let g:ivim_default_scheme=0
    if g:ivim_default_scheme
        echo 'add let g:ivim_default_scheme = 0 to vimrc.ivim.local'
    endif
    let g:indent_guides_auto_colors=1
    if !has("gui_running")
        let g:gruvbox_italic=0
    endif
    colorscheme gruvbox
elseif using_dark_colorscheme
    "set t_Co&
    set background=dark    " Setting dark mode
    colorscheme ron
    "colorscheme desert
    "colorscheme hybrid
    " change tab bg: 235->16, set in vimrc
    " add this line to vimrc.ivim.local let g:ivim_default_scheme=0
    if g:ivim_default_scheme
        echo 'add let g:ivim_default_scheme = 0 to vimrc.ivim.local'
    endif
    let g:indent_guides_auto_colors=0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=16
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=16
endif

" }}}

" neocomplete or neocomplcache {{{

" Install vim-gnome will provide vim-lua support
if has('lua')
    " neocomplete {
    let g:acp_enableAtStartup = 0
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#enable_auto_delimiter = 1
    let g:neocomplete#max_list = 15
    let g:neocomplete#force_overwrite_completefunc = 1

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
                \ 'default' : '',
                \ 'vimshell' : $HOME.'/.vimshell_hist',
                \ 'scheme' : $HOME.'/.gosh_completions'
                \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings {
        " These two lines conflict with the default digraph mapping of <C-K>
        if !exists('g:spf13_no_neosnippet_expand')
            imap <C-k> <Plug>(neosnippet_expand_or_jump)
            smap <C-k> <Plug>(neosnippet_expand_or_jump)
        endif
        if exists('g:spf13_noninvasive_completion')
            inoremap <CR> <CR>
            " <ESC> takes you out of insert mode
            inoremap <expr> <Esc>   pumvisible() ? "\<C-y>\<Esc>" : "\<Esc>"
            " <CR> accepts first, then sends the <CR>
            inoremap <expr> <CR>    pumvisible() ? "\<C-y>\<CR>" : "\<CR>"
            " <Down> and <Up> cycle like <Tab> and <S-Tab>
            inoremap <expr> <Down>  pumvisible() ? "\<C-n>" : "\<Down>"
            inoremap <expr> <Up>    pumvisible() ? "\<C-p>" : "\<Up>"
            " Jump up and down the list
            inoremap <expr> <C-d>   pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
            inoremap <expr> <C-u>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"
        else
            " <C-k> Complete Snippet
            " <C-k> Jump to next snippet point
            imap <silent><expr><C-k> neosnippet#expandable() ?
                        \ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
                        \ "\<C-e>" : "\<Plug>(neosnippet_expand_or_jump)")
            smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)

            inoremap <expr><C-g> neocomplete#undo_completion()
            inoremap <expr><C-l> neocomplete#complete_common_string()
            "inoremap <expr><CR> neocomplete#complete_common_string()

            " <CR>: close popup
            " <s-CR>: close popup and save indent.
            inoremap <expr><s-CR> pumvisible() ? neocomplete#smart_close_popup()"\<CR>" : "\<CR>"

            function! CleverCr()
                if pumvisible()
                    if neosnippet#expandable()
                        let exp = "\<Plug>(neosnippet_expand)"
                        return exp . neocomplete#smart_close_popup()
                    else
                        return neocomplete#smart_close_popup()
                    endif
                else
                    return "\<CR>"
                endif
            endfunction

            " <CR> close popup and save indent or expand snippet 
            imap <expr> <CR> CleverCr()
            " <C-h>, <BS>: close popup and delete backword char.
            inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
            inoremap <expr><C-y> neocomplete#smart_close_popup()
        endif
        " <TAB>: completion.
        inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
        inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

        " Courtesy of Matteo Cavalleri

        function! CleverTab()
            if pumvisible()
                return "\<C-n>"
            endif
            let substr = strpart(getline('.'), 0, col('.') - 1)
            let substr = matchstr(substr, '[^ \t]*$')
            if strlen(substr) == 0
                " nothing to match on empty string
                return "\<Tab>"
            else
                " existing text matching
                if neosnippet#expandable_or_jumpable()
                    return "\<Plug>(neosnippet_expand_or_jump)"
                else
                    return neocomplete#start_manual_complete()
                endif
            endif
        endfunction

        imap <expr> <Tab> CleverTab()
    " }

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
    " }
else
    " neocomplcache {
    let g:acp_enableAtStartup = 0
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_enable_camel_case_completion = 1
    let g:neocomplcache_enable_smart_case = 1
    let g:neocomplcache_enable_underbar_completion = 1
    let g:neocomplcache_enable_auto_delimiter = 1
    let g:neocomplcache_max_list = 15
    let g:neocomplcache_force_overwrite_completefunc = 1

    " Define dictionary.
    let g:neocomplcache_dictionary_filetype_lists = {
                \ 'default' : '',
                \ 'vimshell' : $HOME.'/.vimshell_hist',
                \ 'scheme' : $HOME.'/.gosh_completions'
                \ }

    " Define keyword.
    if !exists('g:neocomplcache_keyword_patterns')
        let g:neocomplcache_keyword_patterns = {}
    endif
    let g:neocomplcache_keyword_patterns._ = '\h\w*'

    " Plugin key-mappings {
        " These two lines conflict with the default digraph mapping of <C-K>
        imap <C-k> <Plug>(neosnippet_expand_or_jump)
        smap <C-k> <Plug>(neosnippet_expand_or_jump)
        if exists('g:spf13_noninvasive_completion')
            inoremap <CR> <CR>
            " <ESC> takes you out of insert mode
            inoremap <expr> <Esc>   pumvisible() ? "\<C-y>\<Esc>" : "\<Esc>"
            " <CR> accepts first, then sends the <CR>
            inoremap <expr> <CR>    pumvisible() ? "\<C-y>\<CR>" : "\<CR>"
            " <Down> and <Up> cycle like <Tab> and <S-Tab>
            inoremap <expr> <Down>  pumvisible() ? "\<C-n>" : "\<Down>"
            inoremap <expr> <Up>    pumvisible() ? "\<C-p>" : "\<Up>"
            " Jump up and down the list
            inoremap <expr> <C-d>   pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
            inoremap <expr> <C-u>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"
        else
            imap <silent><expr><C-k> neosnippet#expandable() ?
                        \ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
                        \ "\<C-e>" : "\<Plug>(neosnippet_expand_or_jump)")
            smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)

            inoremap <expr><C-g> neocomplcache#undo_completion()
            inoremap <expr><C-l> neocomplcache#complete_common_string()
            "inoremap <expr><CR> neocomplcache#complete_common_string()

            function! CleverCr()
                if pumvisible()
                    if neosnippet#expandable()
                        let exp = "\<Plug>(neosnippet_expand)"
                        return exp . neocomplcache#close_popup()
                    else
                        return neocomplcache#close_popup()
                    endif
                else
                    return "\<CR>"
                endif
            endfunction

            " <CR> close popup and save indent or expand snippet 
            imap <expr> <CR> CleverCr()

            " <CR>: close popup
            " <s-CR>: close popup and save indent.
            inoremap <expr><s-CR> pumvisible() ? neocomplcache#close_popup()"\<CR>" : "\<CR>"
            "inoremap <expr><CR> pumvisible() ? neocomplcache#close_popup() : "\<CR>"

            " <C-h>, <BS>: close popup and delete backword char.
            inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
            inoremap <expr><C-y> neocomplcache#close_popup()
        endif
        " <TAB>: completion.
        inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
        inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
    " }

    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
    autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

    " Enable heavy omni completion.
    if !exists('g:neocomplcache_omni_patterns')
        let g:neocomplcache_omni_patterns = {}
    endif
    let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.go = '\h\w*\.\?'
    " }
endif

" }}}

" other plugins setting {{{

" xterm-color-table.vim
" Provides command :XtermColorTable, as well as variants for different splits
" Xterm numbers on the left, equivalent RGB values on the right
" Press # to yank current color (shortcut for yiw)
" Press t to toggle RGB text visibility
" Press f to set RGB text to current color

" Unite.vim
" unite#custom#default_action({kind}, {default-action})
" Changes the default action of {kind} into {default-action}.
" You may specify multiple {kind} with the separator ",".
" Open file in new tab, instead of in new buffer.
call unite#custom#default_action('file', 'tabopen')

" jeffy-plugins
let g:jeffy_plugins_enable_colors = 0

" vim-ragtag
let g:ragtag_global_maps = 1

" GoldenView.Vim
let g:goldenview__enable_default_mapping = 0
" 1. split to tiled windows
nmap <silent> <C-L>  <Plug>GoldenViewSplit
" 2. quickly switch current window with the main pane
" and toggle back
"nmap <silent> <F8>   <Plug>GoldenViewSwitchMain
"nmap <silent> <S-F8> <Plug>GoldenViewSwitchToggle
" 3. jump to next and previous window
"nmap <silent> <C-N>  <Plug>GoldenViewNext
"nmap <silent> <C-P>  <Plug>GoldenViewPrevious
" others
"nmap <silent> <YOUR_KEY> <Plug>GoldenViewResize
"nmap <silent> <YOUR_KEY> <Plug>GoldenViewSwitchWithLargest
"nmap <silent> <YOUR_KEY> <Plug>GoldenViewSwitchWithSmallest

" restore_view.vim
set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
" let g:skipview_files = ['*\.vim']

" vim orgmode: VimOrganizer
au! BufRead,BufWrite,BufWritePost,BufNewFile *.org 
au BufEnter *.org call org#SetOrgFileType()

" -> NERD Tree
let g:NERDTreeWinSize=15
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']

" NrrwRgn
" open the narrowed window as a vertical split buffer
" Use ,Space to toggle the highlight search
" nnoremap <Leader><Space> :set hlsearch!<CR>
" conflict with NrrwRgn
" silent! nunmap <Leader><Space>
" or
nmap <F3> <Plug>NrrwrgnWinIncr
xmap <F3> <Plug>NrrwrgnDo
let g:nrrw_rgn_vert = 0
vnoremap <leader>nr :NR<CR>

" -> delimitMate
let delimitMate_excluded_regions = "Comment"

" emmet-vim To remap the default <C-Y> leader
let g:user_emmet_leader_key='<S-Z>'

" ctrl+c default function: leave insert mode, similar to esc
vmap <C-C> "+y

" cscope
nmap <leader>ss :cs find s <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sg :cs find g <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sc :cs find c <C-R>=expand("<cword>")<cr><cr>
nmap <leader>st :cs find t <C-R>=expand("<cword>")<cr><cr>
nmap <leader>se :cs find e <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sf :cs find f <C-R>=expand("<cfile>")<cr><cr>
nmap <leader>si :cs find i <C-R>=expand("<cfile>")<cr><cr>
nmap <leader>sd :cs find d <C-R>=expand("<cword>")<cr><cr>

" syntastic
let g:syntastic_check_on_open = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_loc_list_height = 4
let g:syntastic_auto_jump = 2
let g:syntastic_aggregate_errors = 1
let g:syntastic_enable_balloons = 1
let g:syntastic_mode_map = { 'passive_filetypes': ['scss', 'slim'] }
let g:syntastic_python_checkers = ['pyflakes', 'pylint']
let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
" Turn off some stupid pylint checks for syntastic + Python
" -E: Just show errors
" -d: disable
" pylint --list-msgs: show all codes
let g:syntastic_python_pylint_args="-E"
" or
let g:syntastic_python_pylint_args="-d C0103,C0111,C0301,C0326"
" the following two lines setting will silence all warnings, except for the ones produced by "pylint"
"let g:syntastic_quiet_messages = { "level": "warnings" }
"let g:syntastic_python_pylint_quiet_messages = { "level" : [] }
"set statusline+=%{SyntasticStatuslineFlag()}
"let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
"let g:syntastic_enable_highlighting = 0
"let g:syntastic_cpp_include_dirs = ['/usr/include/']
"let g:syntastic_cpp_remove_include_errors = 1
"let g:syntastic_cpp_check_header = 1
"let g:syntastic_cpp_compiler = 'clang++'
"let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'

" goto next or previous error
nmap <leader>jj :lnext<cr>
nmap <leader>jk :lprev<cr>

" vim-indent-guides
" Toggle vim-indent-guides
nmap <silent> <Leader>ji <Plug>IndentGuidesToggle
let g:indent_guides_start_level = 1
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1

" gitgutter
" change gitgutter SignColumn Same as line number column
highlight clear SignColumn
" Toggle GitGutterLineHighlightsToggle
nmap <silent> <Leader>jg :GitGutterLineHighlightsToggle<CR>
let g:gitgutter_highlight_lines = 1

" Toggle paste mode
set pastetoggle=<leader>p

" }}}

" vim:set et fdm=marker:
