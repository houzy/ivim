" local settings {

set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,ucs-bom,chinese,taiwan,japan,korea,latin1
set fileformat=unix

set mouse=a                 " Automatically enable mouse usage
set mousehide               " Hide the mouse cursor while typing
set virtualedit&            " Reset option to its default value.
set whichwrap-=h
set whichwrap-=l

set tabstop=4                   " An indentation every four columns

set t_Co&
colorscheme ron
set showbreak&
" set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮ " Change listchars
set listchars=tab:›\ ,eol:¬,extends:❯,precedes:❮,nbsp:⌴,trail:⌴ " Change listchars
set listchars-=eol:¬
" autocmd remove
autocmd! trailing InsertEnter,InsertLeave *

exec 'set backupdir='.&backupdir.'/'
exec 'set viewdir='.&viewdir.'/'
exec 'set directory='.&directory.'/'
exec 'set undodir='.&undodir.'/'

set tags+=~/ctagsFile/systags

" do it later
"NeoBundle 'hewes/unite-gtags'
"NeoBundle 'shibuyanorailgun/gtags.vim'

NeoBundle 'houzy/jeffy-plugins'
NeoBundle 'tpope/vim-ragtag'
NeoBundle 'zhaocai/GoldenView.Vim' "Always have a nice view for vim split windows
NeoBundle 'vim-scripts/restore_view.vim'
NeoBundle 'vim-scripts/VisIncr'
" an excellent calendar app, has the same command with calendar-vim
"NeoBundle 'itchyny/calendar.vim'

" orgmode
NeoBundle 'hsitz/VimOrganizer'
NeoBundle 'mattn/calendar-vim'
NeoBundle 'chrisbra/NrrwRgn'
NeoBundle 'vim-scripts/utl.vim'

" neocomplete {
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_auto_delimiter = 1
let g:neocomplete#max_list = 15
let g:neocomplete#force_overwrite_completefunc = 1

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings {
    " These two lines conflict with the default digraph mapping of <C-K>
    if !exists('g:spf13_no_neosnippet_expand')
        imap <C-k> <Plug>(neosnippet_expand_or_jump)
        smap <C-k> <Plug>(neosnippet_expand_or_jump)
    endif
    if exists('g:spf13_noninvasive_completion')
        inoremap <CR> <CR>
        " <ESC> takes you out of insert mode
        inoremap <expr> <Esc>   pumvisible() ? "\<C-y>\<Esc>" : "\<Esc>"
        " <CR> accepts first, then sends the <CR>
        inoremap <expr> <CR>    pumvisible() ? "\<C-y>\<CR>" : "\<CR>"
        " <Down> and <Up> cycle like <Tab> and <S-Tab>
        inoremap <expr> <Down>  pumvisible() ? "\<C-n>" : "\<Down>"
        inoremap <expr> <Up>    pumvisible() ? "\<C-p>" : "\<Up>"
        " Jump up and down the list
        inoremap <expr> <C-d>   pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
        inoremap <expr> <C-u>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"
    else
        " <C-k> Complete Snippet
        " <C-k> Jump to next snippet point
        imap <silent><expr><C-k> neosnippet#expandable() ?
                    \ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
                    \ "\<C-e>" : "\<Plug>(neosnippet_expand_or_jump)")
        smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)

        inoremap <expr><C-g> neocomplete#undo_completion()
        inoremap <expr><C-l> neocomplete#complete_common_string()
        "inoremap <expr><CR> neocomplete#complete_common_string()

        " <CR>: close popup
        " <s-CR>: close popup and save indent.
        inoremap <expr><s-CR> pumvisible() ? neocomplete#smart_close_popup()"\<CR>" : "\<CR>"

        function! CleverCr()
            if pumvisible()
                if neosnippet#expandable()
                    let exp = "\<Plug>(neosnippet_expand)"
                    return exp . neocomplete#smart_close_popup()
                else
                    return neocomplete#smart_close_popup()
                endif
            else
                return "\<CR>"
            endif
        endfunction

        " <CR> close popup and save indent or expand snippet 
        imap <expr> <CR> CleverCr() 
        " <C-h>, <BS>: close popup and delete backword char.
        inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
        inoremap <expr><C-y> neocomplete#smart_close_popup()
    endif
    " <TAB>: completion.
    inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

    " Courtesy of Matteo Cavalleri

    function! CleverTab()
        if pumvisible()
            return "\<C-n>"
        endif
        let substr = strpart(getline('.'), 0, col('.') - 1)
        let substr = matchstr(substr, '[^ \t]*$')
        if strlen(substr) == 0
            " nothing to match on empty string
            return "\<Tab>"
        else
            " existing text matching
            if neosnippet#expandable_or_jumpable()
                return "\<Plug>(neosnippet_expand_or_jump)"
            else
                return neocomplete#start_manual_complete()
            endif
        endif
    endfunction

    imap <expr> <Tab> CleverTab()
" }

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
" }


" jeffy-plugins
let g:jeffy_plugins_enable_colors = 0

" vim-ragtag
let g:ragtag_global_maps = 1

" GoldenView.Vim
let g:goldenview__enable_default_mapping = 0
" 1. split to tiled windows
nmap <silent> <C-L>  <Plug>GoldenViewSplit
" 2. quickly switch current window with the main pane
" and toggle back
"nmap <silent> <F8>   <Plug>GoldenViewSwitchMain
"nmap <silent> <S-F8> <Plug>GoldenViewSwitchToggle
" 3. jump to next and previous window
"nmap <silent> <C-N>  <Plug>GoldenViewNext
"nmap <silent> <C-P>  <Plug>GoldenViewPrevious
" others
"nmap <silent> <YOUR_KEY> <Plug>GoldenViewResize
"nmap <silent> <YOUR_KEY> <Plug>GoldenViewSwitchWithLargest
"nmap <silent> <YOUR_KEY> <Plug>GoldenViewSwitchWithSmallest

" restore_view.vim
set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
" let g:skipview_files = ['*\.vim']

" vim orgmode: VimOrganizer
au! BufRead,BufWrite,BufWritePost,BufNewFile *.org 
au BufEnter *.org call org#SetOrgFileType()

" -> NERD Tree
let g:NERDTreeWinSize=15
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']

" NrrwRgn
" open the narrowed window as a vertical split buffer
" Use ,Space to toggle the highlight search
" nnoremap <Leader><Space> :set hlsearch!<CR>
" conflict with NrrwRgn
" silent! nunmap <Leader><Space>
" or
nmap <F3> <Plug>NrrwrgnWinIncr
xmap <F3> <Plug>NrrwrgnDo
let g:nrrw_rgn_vert = 0
vnoremap <leader>nr :NR<CR>

" -> delimitMate
let delimitMate_excluded_regions = "Comment"

" emmet-vim To remap the default <C-Y> leader
let g:user_emmet_leader_key='<C-Z>'

" ivim user setting
let g:ivim_user='houzy' " User name
let g:ivim_email='h-zy2008@hotmail.com' " User email
let g:ivim_github='https://github.com/houzy' " User github
" ivim UI setting
let g:ivim_fancy_font=1 " Enable using fancy font
let g:ivim_show_number=1 " Enable showing number
" ivim plugin setting
let g:ivim_bundle_groups=['ui', 'enhance', 'move', 'navigate',
            \'complete', 'compile', 'git', 'language']

" ctrl+c default function: leave insert mode, similar to esc
vmap <C-C> "+y

" cscope
nmap <leader>ss :cs find s <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sg :cs find g <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sc :cs find c <C-R>=expand("<cword>")<cr><cr>
nmap <leader>st :cs find t <C-R>=expand("<cword>")<cr><cr>
nmap <leader>se :cs find e <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sf :cs find f <C-R>=expand("<cfile>")<cr><cr>
nmap <leader>si :cs find i <C-R>=expand("<cfile>")<cr><cr>
nmap <leader>sd :cs find d <C-R>=expand("<cword>")<cr><cr>

" syntastic
let g:syntastic_check_on_open = 0
let g:syntastic_loc_list_height = 4

" }
