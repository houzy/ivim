* Skills
| Shortcut          | Action                                                                          |
|-------------------+---------------------------------------------------------------------------------|
| :verbose set var? | Debug some variables                                                            |
| :cd               | Change current path                                                             |
| :cd %:h           | Change to current file's path                                                   |
| :lcd              | Change current window path                                                      |
| :pwd              | Show current path                                                               |
| tabedit %         | tabedit current file                                                            |
| vim file +line    | Specific file line number when open file                                        |
| <CTRL-V><Tab>     | Insert Tab                                                                      |
| dd                | ["x]dd Delete [count] lines [into register x] linewise.                         |
| cc                | ["x]cc Delete [count] lines [into register x] and start                         |
|                   | insert linewise.  If 'autoindent' is on, preserve                               |
|                   | the indent of the first line.                                                   |
| caw               | change a word, aw – a word (includes surrounding white space)                   |
| ciw               | change a inner word, iw – inner word (does not include surrounding white space) |
|                   | as – a sentence                                                                 |
|                   | is – inner sentence                                                             |
|                   | ap – a paragraph                                                                |
|                   | ip – inner paragraph                                                            |
|                   | Strings                                                                         |
|                   | a” – a double quoted string                                                     |
|                   | i” – inner double quoted string                                                 |
|                   | a’ – a single quoted string                                                     |
|                   | i’ – inner single quoted string                                                 |
|                   | a` – a back quoted string                                                       |
|                   | i` – inner back quoted string                                                   |
| d3k               | delete 3 upwards                                                                |
| >>                | Indent line by shiftwidth spaces                                                |
| <<                | De-indent line by shiftwidth spaces                                             |
| 5>>               | Indent 5 lines                                                                  |
| Vjj>              | Indent 3 lines                                                                  |
| 5==               | Re-indent 5 lines                                                               |
| >%                | Increase indent of a braced or bracketed block (place cursor on brace first)    |
| =%                | Reindent a braced or bracketed block (cursor on brace)                          |
| <%                | Decrease indent of a braced or bracketed block (cursor on brace)                |
| ]p                | Paste text, aligning indentation with surroundings                              |
| =i{               | Re-indent the 'inner block', i.e. the contents of the block                     |
| =a{               | Re-indent 'a block', i.e. block and containing braces                           |
| =2a{              | Re-indent '2 blocks', i.e. this block and containing block                      |
| >i{               | Increase inner block indent                                                     |
| <i{               | Decrease inner block indent                                                     |
| CTRL-t            | In insert mode, insert indent at start of line                                  |
| CTRL-d            | In insert mode, remove indent at start of line                                  |
| 0 CTRL-d          | In insert mode, remove all indentation from line                                |
| sudoedit          | Using sudoedit to avoid getting warning: "sudo vim" is detected. This           |
|                   | feature is disabled.                                                            |
|                   | A: Because neocomplete (and other plugins) creates temporary files              |
|                   | in super user permission by sudo command. You must use sudo.vim                 |
|                   | or set "Defaults always_set_home" in "/etc/sudoers", or must use                |
|                   | "sudoedit" command.                                                             |
| w!                | Force to write to disk when a file is read only.                                |
| gt5               | shell program to display visual disk usage                                      |
| tig               | ncurses-based Git repository browser                                            |
| [range]j[lines]   | Merge mulitple lines into one line                                              |
|                   | Add text to multiple lines in Vim                                               |
| Ctrl-v Shift-i    | 1: At the beginning                                                             |
|                   | Go to the first foo, press Ctrl-v to enter visual block modeg                   |
|                   | and press down until all the lines with foo are marked. Theng                   |
|                   | press Shift-i to insert at the beginning (of the block). Wheng                  |
|                   | you are finished and press Esc, the inserted characters willg                   |
|                   | be added to each line at the left of the marked block.g                         |
| Ctrl-v $ Shift-a  | 2: At the end                                                                   |
|                   | To insert at the end, press again Ctrl-v, move up/down to mark                  |
|                   | all affected lines and then press End or $ to extend the                        |
|                   | selection until the end of the lines. Now you can press                         |
|                   | Shift-a to append at the end of all the lines, just like                        |
|                   | previously with Shift-i.                                                        |
| Ctrl-v % Shift-i  | 3: A whole block                                                                |
|                   | The visual selection can also be done with normal movement commands.            |
|                   | So to comment a whole block in C you could move to the opening brace            |
|                   | and type Ctrl-v % Shift-i // Esc.                                               |
| unimpaired        | Unimpaired defines a lot of commands that begin with '[' or ']', which          |
|                   | are very convenient.                                                            |

* Custom setting
| Shortcut             | Action                                                          |
|----------------------+-----------------------------------------------------------------|
| <leader>p            | Toggles paste mode.                                             |
| :g/^$/d              | Delete blank lines.                                             |
| <LocalLeader><Space> | Map \<Space> to commenting                                      |
| <Leader>jgt          | :GitGutterToggle<CR>                                            |
| <Leader>jgs          | :GitGutterSignsToggle<CR>                                       |
| <Leader>jgh          | :GitGutterLineHighlightsToggle<CR>                              |
| <Leader>ji           | Toggle vim-indent-guides                                        |
| <Leader>js           | Toggles syntastic between active and passive mode.              |
| <Leader>jj           | goto next error                                                 |
| <Leader>jk           | goto previous error                                             |
| <Leader>je           | :tabedit %<CR>. Tabedit current file                            |
| <Leader>jp           | :cd %:h. Change to current file's path                          |
| <leader>jd           | :YcmCompleter GoToDeclaration<CR>                               |
| <leader>jg           | :YcmCompleter GoToDefinitionElseDeclaration<CR>                 |
| <leader>jf           | :YcmForceCompileAndDiagnostics<CR>                              |
| <leader>jh           | :YcmDiags<CR>                                                   |
| <Leader>jl           | let g:ycm_key_detailed_diagnostics = '<leader>jl'               |
| <C-c>                | "+y. ctrl+c default function: leave insert mode, similar to esc |
| <Leader><Space>      | :set hlsearch!<CR>. Toggle the highlight search                 |
| <Leader>x            | :tabedit $MYVIMRC<CR>. Fast edit the .vimrc file using ,x       |
| <Leader>n            | :set relativenumber!<CR>. Toggle relativenumber                 |
| <C-k>                | Jump to next snippet point                                      |
autocmd filetype python nnoremap <buffer> <Leader>r :call ChoosePythonCompiler()<CR>

* Key Mapping
** Make j and k work the way you expect
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

** Navigation between windows
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l

** Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz

** Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

** Repeat last substitution, including flags, with &.
nnoremap & :&&<CR>
xnoremap & :&&<CR>

** Keep the cursor in place while joining lines
nnoremap J mzJ`z

** Select entire buffer
nnoremap vaa ggvGg_

** Strip all trailing whitespace in the current file
nnoremap <Leader>q :%s/\s\+$//<CR>:let @/=''<CR>

** Modify all the indents
nnoremap \= gg=G

** See the differences between the current buffer and the file it was loaded from
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_
            \ | diffthis | wincmd p | diffthis

** Only have cursorline in current window and in normal window
autocmd WinLeave * set nocursorline
autocmd WinEnter * set cursorline
autocmd InsertEnter * set nocursorline
autocmd InsertLeave * set cursorline

* Search Related
** settings
set ignorecase " Case insensitive search
set smartcase " Case sensitive when uc present
set hlsearch " Highlight search terms
set incsearch " Find as you type search
set gdefault " turn on g flag

** Use sane regexes
nnoremap / /\v
vnoremap / /\v
cnoremap s/ s/\v
nnoremap ? ?\v
vnoremap ? ?\v
cnoremap s? s?\v

** Keep search matches in the middle of the window
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap * *zzzv
nnoremap # #zzzv
nnoremap g* g*zzzv
nnoremap g# g#zzzv

** Visual search mappings
function! s:VSetSearch()
    let temp=@@
    normal! gvy
    let @/='\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
    let @@=temp
endfunction
vnoremap * :<C-U>call <SID>VSetSearch()<CR>//<CR>
vnoremap # :<C-U>call <SID>VSetSearch()<CR>??<CR>

** Use ,Space to toggle the highlight search
nnoremap <Leader><Space> :set hlsearch!<CR>

* Fold Related
** settings
set foldlevelstart=0 " Start with all folds closed
set foldcolumn=1 " Set fold column

** Space to toggle and create folds.
nnoremap <silent> <Space> @=(foldlevel('.') ? 'za' : '\<Space>')<CR>
vnoremap <Space> zf

** Set foldtext
function! MyFoldText()
    let line=getline(v:foldstart)
    let nucolwidth=&foldcolumn+&number*&numberwidth
    let windowwidth=winwidth(0)-nucolwidth-3
    let foldedlinecount=v:foldend-v:foldstart+1
    let onetab=strpart('          ', 0, &tabstop)
    let line=substitute(line, '\t', onetab, 'g')
    let line=strpart(line, 0, windowwidth-2-len(foldedlinecount))
    let fillcharcount=windowwidth-len(line)-len(foldedlinecount)
    return line.'…'.repeat(' ',fillcharcount).foldedlinecount.'L'.' '
endfunction
set foldtext=MyFoldText()

* File Type Specific Setting
** QuickFix
augroup ft_quickfix
    autocmd!
    autocmd filetype qf setlocal nolist nocursorline nowrap textwidth=0
augroup END

** Markdown
augroup ft_markdown
    autocmd!
    " Use <localLeader>1/2/3/4/5/6 to add headings
    autocmd filetype markdown nnoremap <buffer> <LocalLeader>1 I# <ESC>
    autocmd filetype markdown nnoremap <buffer> <LocalLeader>2 I## <ESC>
    autocmd filetype markdown nnoremap <buffer> <LocalLeader>3 I### <ESC>
    autocmd filetype markdown nnoremap <buffer> <LocalLeader>4 I#### <ESC>
    autocmd filetype markdown nnoremap <buffer> <LocalLeader>5 I##### <ESC>
    autocmd filetype markdown nnoremap <buffer> <LocalLeader>6 I###### <ESC>
    " Use <LocalLeader>b to add blockquotes in normal and visual mode
    autocmd filetype markdown nnoremap <buffer> <LocalLeader>b I> <ESC>
    autocmd filetype markdown vnoremap <buffer> <LocalLeader>b :s/^/> /<CR>
    " Use <localLeader>ul and <localLeader>ol to add list symbols in visual mode
    autocmd filetype markdown vnoremap <buffer> <LocalLeader>ul :s/^/* /<CR>
    autocmd filetype markdown vnoremap <buffer> <LocalLeader>ol :s/^/\=(line(".")-line("'<")+1).'. '/<CR>
    " Use <localLeader>e1/2/3 to add emphasis symbols
    autocmd filetype markdown nnoremap <buffer> <LocalLeader>e1 I*<ESC>A*<ESC>
    autocmd filetype markdown nnoremap <buffer> <LocalLeader>e2 I**<ESC>A**<ESC>
    autocmd filetype markdown nnoremap <buffer> <LocalLeader>e3 I***<ESC>A***<ESC>
    autocmd filetype markdown vnoremap <buffer> <LocalLeader>e1 :s/\%V\(.*\)\%V/\*\1\*/<CR>
    autocmd filetype markdown vnoremap <buffer> <LocalLeader>e2 :s/\%V\(.*\)\%V/\*\*\1\*\*/<CR>
    autocmd filetype markdown vnoremap <buffer> <LocalLeader>e3 :s/\%V\(.*\)\%V/\*\*\*\1\*\*\*/<CR>
    " Turn on spell
    autocmd filetype markdown setlocal spell
augroup END

** HTML
augroup ft_html
    autocmd!
    autocmd filetype html setlocal spell " Turn on spell
augroup END

** LESS
augroup ft_less
    autocmd!
    autocmd filetype less nnoremap <buffer> <Leader>r :w <BAR> !lessc % > %:t:r.css<CR><Space>
augroup END

* YouCompleteMe
| Shortcut   | Action                                                |
|------------+-------------------------------------------------------|
| c-x c-o    | :verbose imap <C/S-Space> and :verbose imap <Nul>     |
|            | https://github.com/Valloric/YouCompleteMe/issues/1123 |
| c-x c-n    | Using vim's completion, not YouCompleteMe             |
| c-x c-p    | Using vim's completion, not YouCompleteMe             |
|            | YCM doesn't show function parameters for C            |
|            | https://github.com/Valloric/YouCompleteMe/issues/234# |
| <leader>jd | :YcmCompleter GoToDeclaration<CR>                     |
| <leader>jg | :YcmCompleter GoToDefinitionElseDeclaration<CR>       |
| <leader>jf | :YcmForceCompileAndDiagnostics<CR>                    |
| <leader>jh | :YcmDiags<CR>                                         |
| <Leader>jl | let g:ycm_key_detailed_diagnostics = '<leader>jl'     |

* syntastic
| Shortcut   | Action                                                                        |
|------------+-------------------------------------------------------------------------------|
| <Leader>js | :SyntasticToggleMode<CR>.  Toggles syntastic between active and passive mode. |
| <leader>jj | :lnext<cr>                                                                    |
| <leader>jk | :lprev<cr>                                                                    |

* DoxygenToolkit.vim
| Shortcut   | Action                     |
|------------+----------------------------|
| :Dox       | Generate function synopsis |
| :DoxAuthor | Generate file synopsis     |
| :DoxBlock  | Generate block synopsis    |
| :DoxLic    | Generate licence synopsis  |
| :DoxUndoc  |                            |

* goyo.vim
  TODO

* Unite
| Shortcut | Action                                                                           |
|----------+----------------------------------------------------------------------------------|
| <Space>f | <C-U>Unite -start-insert -auto-resize -buffer-name=files file_rec/async<CR><C-U> |
| <Space>y | <C-U>Unite -start-insert -buffer-name=yanks history/yank<CR>                     |
| <Space>l | <C-U>Unite -start-insert -auto-resize -buffer-name=line line<CR>                 |
| <Space>o | <C-U>Unite -auto-resize -buffer-name=outline outline<CR>                         |
| <Space>b | <C-U>Unite -quick-match buffer<CR>                                               |
| <Space>t | <C-U>Unite -quick-match tab<CR>                                                  |
| <Space>/ | <C-U>Unite -auto-resize -buffer-name=search grep:.<CR>                           |
function! s:unite_settings() " Use ESC to exit, and use C-J and C-K to move
    nmap <buffer> <ESC> <plug>(unite_exit)
    imap <buffer> <ESC> <plug>(unite_exit)
    imap <buffer> <C-J> <Plug>(unite_select_next_line)
    imap <buffer> <C-K> <Plug>(unite_select_previous_line)
endfunction
autocmd filetype unite call s:unite_settings()

* vim-unimpaired
:h unimpaired

Much of unimpaired.vim was extracted from my vimrc when I noticed a pattern:
complementary pairs of mappings. They mostly fall into four categories.

There are mappings which are simply short normal mode aliases for commonly
used ex commands. ]q is :cnext. [q is :cprevious. ]a is :next. [b is :bprevious.
See the documentation for the full set of 20 mappings and mnemonics. All of
them take a count.

There are linewise mappings. [<Space> and ]<Space> add newlines before and
after the cursor line. [e and ]e exchange the current line with the one above
or below it.

There are mappings for toggling options. [os, ]os, and cos perform :set spell,
:set nospell, and :set invspell, respectively. There's also l (list), n (number),
w (wrap), x (cursorline cursorcolumn), and several others, plus mappings to help
alleviate the set paste dance. Consult the documentation.

There are mappings for encoding and decoding. [x and ]x encode and decode XML
(and HTML). [u and ]u encode and decode URLs. [y and ]y do C String style escaping.

And in the miscellaneous category, there's [f and ]f to go to the next/previous
file in the directory, and [n and ]n to jump between SCM conflict markers.

The . command works with all operator mappings, and will work with the linewise
mappings as well if you install repeat.vim.

* NrrwRgn
" open the narrowed window as a vertical split buffer
" Use ,Space to toggle the highlight search
" nnoremap <Leader><Space> :set hlsearch!<CR>
" conflict with NrrwRgn
" silent! nunmap <Leader><Space>
" or
nmap <F3> <Plug>NrrwrgnWinIncr
xmap <F3> <Plug>NrrwrgnDo
let g:nrrw_rgn_vert = 0
vnoremap <leader>nr :NR<CR>

* Splitjoin
let g:splitjoin_split_mapping = ',s'
let g:splitjoin_join_mapping  = ',j'
| Shortcut | Action                                                                                       |
|----------+----------------------------------------------------------------------------------------------|
| gS       | To split a one-liner into multiple lines                                                     |
| gJ       | (with the cursor on the first line of a block) to join a block into a single-line statement. |
More: :h splitjoin

* SudoEdit.vim
| Shortcut                    | Action |
|-----------------------------+--------|
| :SudoRead[!] [file]         |        |
| :[range]SudoWrite[!] [file] |        |

* investigate.vim
nnoremap K :call investigate#Investigate()<CR>

* UltiSnips
let g:UltiSnipsExpandTrigger="<C-K>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"

* vim-surround
** Examples:
| 1 | Old text              | Command | New text ~                |
|---+-----------------------+---------+---------------------------|
| 2 | "Hello *world!"       | ds"     | Hello world!              |
| 3 | [123+4*56]/2          | cs])    | (123+456)/2               |
| 4 | "Look ma, I'm *HTML!" | cs"<q>  | <q>Look ma, I'm HTML!</q> |
| 5 | if *x>3 {             | ysW(    | if ( x>3 ) {              |
| 6 | my $str = *whee!;     | vlllls' | my $str = 'whee!';        |
| 7 | <div>Yo!*</div>       | dst     | Yo!                       |
| 8 | <div>Yo!*</div>       | cst<p>  | <p>Yo!</p>                |
解释一下，*代表当前光标位置，添加替换时使用后半括号)]}，添加的括号和内容间就没有空格（如第2个示例），反之会在内容前后添加一个空格（如第4个实例）。第6个示例中的t代表一对HTML或者xml tag。其他表示范围的符号：w代表word, W代表WORD(被空格分开的连续的字符窜），p代表paragraph。

** Commands
Normal mode
-----------
ds  - delete a surrounding
cs  - change a surrounding
ys  - add a surrounding
yS  - add a surrounding and place the surrounded text on a new line + indent it
yss - add a surrounding to the whole line
ySs - add a surrounding to the whole line, place it on a new line + indent it
ySS - same as ySs

Visual mode
-----------
s   - in visual mode, add a surrounding
S   - in visual mode, add a surrounding but place text on new line + indent it

Insert mode
-----------
<CTRL-s>         - in insert mode, add a surrounding
<CTRL-s><CTRL-s> - in insert mode, add a new line + surrounding + indent
<CTRL-g>s        - same as <CTRL-s>
<CTRL-g>S        - same as <CTRL-s><CTRL-s>

** text-object motion
1 ci[ ci( ci< ci{ 删除一对 [], (), <>, 或{} 中的所有字符并进入插入模式
2 ci” ci’ ci` 删除一对引号字符 ”  ‘ 或 ` 中所有字符并进入插入模式
3 cit 删除一对 HTML/XML 的标签内部的所有字符并进入插入模式

其他常见operation
1 ci: 例如，ci(，或者ci)，将会修改()之间的文本；
2 di: 剪切配对符号之间文本；
3 yi: 复制；
4 ca: 同ci，但修改内容包括配对符号本身；
5 da: 同di，但剪切内容包括配对符号本身；
6 ya: 同yi，但复制内容包括配对符号本身。
7 PS. dib等同于di(。diB等同于di{。

** Official examples
Surround.vim is all about "surroundings": parentheses, brackets, quotes, XML tags, and more. The plugin provides mappings to easily delete, change and add such surroundings in pairs.

It's easiest to explain with examples. Press cs"' inside

"Hello world!"
to change it to

'Hello world!'
Now press cs'<q> to change it to

<q>Hello world!</q>
To go full circle, press cst" to get

"Hello world!"
To remove the delimiters entirely, press ds".

Hello world!
Now with the cursor on "Hello", press ysiw] (iw is a text object).

[Hello] world!
Let's make that braces and add some space (use } instead of { for no space): cs]{

{ Hello } world!
Now wrap the entire line in parentheses with yssb or yss).

({ Hello } world!)
Revert to the original text: ds{ds)

Hello world!
Emphasize hello: ysiw<em>

<em>Hello</em> world!
Finally, let's try out visual mode. Press a capital V (for linewise visual mode) followed by S<p class="important">.

<p class="important">
  <em>Hello</em> world!
</p>
This plugin is very powerful for HTML and XML editing, a niche which currently seems underfilled in Vim land. (As opposed to HTML/XML inserting, for which many plugins are available). Adding, changing, and removing pairs of tags simultaneously is a breeze.

The . command will work with ds, cs, and yss if you install repeat.vim.

* emmet-vim
  " emmet-vim To remap the default <C-Y> leader
  let g:user_emmet_leader_key='<S-Z>'

* delimitMate
  " -> delimitMate
  let delimitMate_excluded_regions = "Comment"
  h: group-name

* undotree
  nnoremap <Leader>u :UndotreeToggle<CR>

* tagbar
  nnoremap <Leader>t :TagbarToggle<CR>

* nerdtree
  nnoremap <Leader>d :NERDTreeTabsToggle<CR>
  nnoremap <Leader>f :NERDTreeFind<CR>

* vim-matchit
1. Extended matching with "%"               *matchit-intro*
                            *matchit-%*
%   Cycle forward through matching groups, such as "if", "else", "endif",
    as specified by |b:match_words|.
                            *g%* *v_g%* *o_g%*
g%  Cycle backwards through matching groups, as specified by
    |b:match_words|.  For example, go from "if" to "endif" to "else".
                            *[%* *v_[%* *o_[%*
[%  Go to [count] previous unmatched group, as specified by
    |b:match_words|.  Similar to |[{|.
                            *]%* *v_]%* *o_]%*
]%  Go to [count] next unmatched group, as specified by
    |b:match_words|.  Similar to |]}|.
                            *v_a%*
a%  In Visual mode, select the matching group, as specified by
    |b:match_words|, containing the cursor.  Similar to |v_a[|.
    A [count] is ignored, and only the first character of the closing
    pattern is selected.

* targets.vim
结合surround插件中的描述：
ci[ ci( ci< ci{ 删除一对 [], (), <>, 或{} 中的所有字符并进入插入模式
ci” ci’ ci` 删除一对引号字符 ”  ‘ 或 ` 中所有字符并进入插入模式
cit 删除一对 HTML/XML 的标签内部的所有字符并进入插入模式

ci: 例如，ci(，或者ci)，将会修改()之间的文本；
di: 剪切配对符号之间文本；
yi: 复制；
ca: 同ci，但修改内容包括配对符号本身；
da: 同di，但剪切内容包括配对符号本身；
ya: 同yi，但复制内容包括配对符号本身。
PS. dib等同于di(。diB等同于di{。

targets.vim插件对vim此功能进行了增强。
:h targets

* vimshell.vim
| Shortcut  | Action                                                         |
|-----------+----------------------------------------------------------------|
| :VimShell | Start Vim Shell                                                |
| <C-l>     | open the unite interface of VimShell’s command history, choose |
|           | a candidate, and type <Cr> to execute it.                      |

* vim-easymotion
Note: The default leader key has been changed to '<Leader><Leader>' to
avoid conflicts with other plugins.
| Default Mapping | Details                                   |
|-----------------+-------------------------------------------|
| <Leader>f{char} | Find {char} to the right.                 |
| <Leader>F{char} | Find {char} to the left.                  |
| <Leader>t{char} | Till before the {char} to the right.      |
| <Leader>T{char} | Till after the {char} to the left.        |
| <Leader>w       | Beginning of word forward.                |
| <Leader>W       | Beginning of WORD forward.                |
| <Leader>b       | Beginning of word backward.               |
| <Leader>B       | Beginning of WORD backward.               |
| <Leader>e       | End of word forward.                      |
| <Leader>E       | End of WORD forward.                      |
| <Leader>ge      | End of word backward.                     |
| <Leader>gE      | End of WORD backward.                     |
| <Leader>j       | Line downward.                            |
| <Leader>k       | Line upward.                              |
| <Leader>n       | Jump to latest "/" or "?" forward.        |
| <Leader>N       | Jump to latest "/" or "?" backward.       |
| <Leader>s       | Find(Search) {char} forward and backward. |

* CamelCaseMotion
This script defines motions ',w', ',b' and ',e' (similar to 'w', 'b', 'e'),
which do not move word-wise (forward/backward), but Camel-wise; i.e. to word
boundaries and uppercase letters. The motions also work on underscore notation,
where words are delimited by underscore ('_') characters. From here on, both
CamelCase and underscore_notation entities are referred to as "words" (in
double quotes). Just like with the regular motions, a [count] can be prepended
to move over multiple "words" at once. Outside of "words" (e.g. in non-keyword
characters like // or ;), the new motions move just like the regular motions.

Vim provides a built-in 'iw' text object called 'inner word', which works in
operator-pending and visual mode. Analog to that, this script defines inner
"word" motions 'i,w', 'i,b' and 'i,e', which select the "word" (or multiple
"words" if a [count] is given) where the cursor is located.

* GoldenView.Vim

* jeffy-plugins
| Shortcut   | Action                              |
|------------+-------------------------------------|
| <leader>jc | :JeffyProjectCreate<cr>             |
| <leader>ju | :JeffyProjectUpdate<cr>             |
| <leader>jl | :JeffyProjectLoad<cr>, no using now |
| <leader>jq | :JeffyProjectQuit<cr>               |

* vim-ragtag

* xterm-color-table.vim

* cscope
| Shortcut   | Action                                      |
|------------+---------------------------------------------|
| <leader>ss | :cs find s <C-R>=expand("<cword>")<cr><cr>  |
| <leader>sg | :cs find g <C-R>=expand("<cword>")<cr><cr>> |
| <leader>sc | :cs find c <C-R>=expand("<cword>")<cr><cr>> |
| <leader>st | :cs find t <C-R>=expand("<cword>")<cr><cr>> |
| <leader>se | :cs find e <C-R>=expand("<cword>")<cr><cr>> |
| <leader>sf | :cs find f <C-R>=expand("<cfile>")<cr><cr>> |
| <leader>si | :cs find i <C-R>=expand("<cfile>")<cr><cr>> |
| <leader>sd | :cs find d <C-R>=expand("<cword>")<cr><cr>> |

* NERD Commenter
  Most of the following mappings are for normal/visual mode only.
  The |NERDComInsertComment| mapping is for insert mode only.

| Shortcut                | Action                                                                        |
|-------------------------+-------------------------------------------------------------------------------|
| <LocalLeader><Space>    | Map \<Space> to commenting                                                    |
| [count]<leader>cc       | NERDComComment: Comment out the current line or text selected in visual mode. |
| [count]<leader>cn       | NERDComNestedComment: Same as <leader>cc but forces nesting.                  |
| [count]<leader>c<space> | NERDComToggleComment: Toggles the comment state of the selected line(s).      |
|                         | If the topmost selected line is commented, all selected lines are uncommented |
|                         | and vice versa.                                                               |
| [count]<leader>cm       | NERDComMinimalComment: Comments the given lines using only one set of         |
|                         | multipart delimiters.                                                         |
| [count]<leader>ci       | NERDComInvertComment: Toggles the comment state of the selected line(s)       |
|                         | individually.                                                                 |
| [count]<leader>cs       | NERDComSexyComment: Comments out the selected lines ``sexily''                |
| [count]<leader>cy       | NERDComYankComment: Same as <leader>cc except that the commented line(s)      |
|                         | are yanked first.                                                             |
| <leader>c$              | NERDComEOLComment: Comments the current line from the cursor                  |
|                         | to the end of line.                                                           |
| <leader>cA              | NERDComAppendComment: Adds comment delimiters to the end of                   |
|                         | line and goes into insert mode between them.                                  |
| NERDComInsertComment    | Adds comment delimiters at the current cursor position and                    |
|                         | inserts between. Disabled by default.                                         |
| <leader>ca              | NERDComAltDelim: Switches to the alternative set of delimiters.               |
| [count]<leader>cl       |                                                                               |
| [count]<leader>cb       | NERDComAlignedComment: Same as NERDComComment except that the                 |
|                         | delimiters are aligned down the left side (<leader>cl) or both                |
|                         | sides (<leader>cb).                                                           |
| [count]<leader>cu       | NERDComUncommentLine: Uncomments the selected line(s).                        |

* limelight
| Shortcut              | Action             |
|-----------------------+--------------------|
| :Limelight[0.0~1.0]   | Turn Limelight on  |
| :Limelight!           | Turn Limelight off |
| :Limelight!![0.0~1.0] | Toggle Limelight   |

* gitgutter
| Shortcut    | Action                             |
|-------------+------------------------------------|
| <Leader>jgt | :GitGutterToggle<CR>               |
| <Leader>jgs | :GitGutterSignsToggle<CR>          |
| <Leader>jgh | :GitGutterLineHighlightsToggle<CR> |
| ]c          | jump to next hunk (change)         |
| [c          | jump to previous hunk (change)     |
| <Leader>hs  | stage the hunk                     |
| <Leader>hr  | revert it                          |
| <Leader>hp  | preview a hunk's changes           |

* VimOrganizer
| Shortcut                  | Action               |
|---------------------------+----------------------|
| :OrgTableDashboard or ,b. | Create or edit table |

* vim-pasta
  This plugin remaps p and P (put command) in normal and visual mode to do context aware pasting. What it means is that indentation of pasted text is adjusted properly to match indentation of surrounding code.
  Basically it opens new, properly indented line (with o or O) in the place you're pasting to then it pastes the text with ]p. The result is nicely indented code with relative indentation between pasted lines preserved.
  注意：在粘贴代码时出现一些调整，应该是这个插件的原因。

| Shortcut | Action                     |
|----------+----------------------------|
| p or P   | This plugin remaps p and P |

To black-list some filetypes put following in your .vimrc:
  let g:pasta_disabled_filetypes = ['python', 'coffee', 'yaml']
To white-list some filetypes put following in your .vimrc:
  let g:pasta_enabled_filetypes = ['ruby', 'javascript', 'css', 'sh']
If you don't want pasta to override default p and P mappings you can change it like this:
  let g:pasta_paste_before_mapping = ',P'
  let g:pasta_paste_after_mapping = ',p'

